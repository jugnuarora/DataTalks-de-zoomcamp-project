id: pigeon_511689
namespace: france-courses-enrollments

inputs:
  - id: courses_or_enrollments
    type: SELECT
    displayName: Select if you want to download courses ot enrollments
    values: [courses, enrollments, formacode]
    defaults: courses

variables:
  today: "{{ now() | date('yyyy_MM_dd') }}"
  gcs_core: "gs://{{kv('GCP_BUCKET_NAME')}}/courses_enrol_data_{{vars.today}}"
  gcs_core_folder: "courses_enrol_data_{{vars.today}}"
  gcs_courses_raw: "{{vars.gcs_core}}/courses_raw_parquet/*.parquet"
  gcs_courses_filtered: "{{vars.gcs_core}}/courses_filtered"
  gcs_enrollments_raw: "{{vars.gcs_core}}/enrollments_raw_parquet/*.parquet"
  gcs_enrollments_filtered: "{{vars.gcs_core}}/enrollments_filtered"
  gcs_formacode_translated: "gs://{{kv('GCP_BUCKET_NAME')}}/formacode_translated"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      c/e: "{{inputs.courses_or_enrollments}}"

  - id: if_courses
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.courses_or_enrollments == 'courses'}}"
    then:
      - id: workingDirectory_c
        type: io.kestra.plugin.core.flow.WorkingDirectory
        tasks:
        - id: cloneRepository_c
          type: io.kestra.plugin.git.Clone
          url: https://github.com/jugnuarora/france_courses_enrollments.git
          branch: main
        
        - id: pythonScript_c
          type: io.kestra.plugin.scripts.python.Commands
          warningOnStdErr: false
          docker:
            image: ghcr.io/kestra-io/pydata:latest
          beforeCommands:
            - pip install -r requirements.txt > /dev/null
            - cd scripts
            - mkdir -p .dlt
            - echo "[destination.filesystem]" > .dlt/secrets.toml
            - echo "bucket_url = \"{{ kv('SECRET_BUCKET_URL') }}\"" >> .dlt/secrets.toml
            - echo "[destination.filesystem.credentials]" >> .dlt/secrets.toml
            - echo "project_id = \"{{ kv('GCP_PROJECT_ID') }}\"" >> .dlt/secrets.toml
            - echo "private_key = \"\"\"{{ kv('SECRET_PRIVATE_KEY') }}\"\"\"" >> .dlt/secrets.toml
            - echo "client_email = \"{{ kv('SECRET_CLIENT_EMAIL') }}\"" >> .dlt/secrets.toml
          commands:
            - python 01_courses_data_upload.py --output {{render(vars.gcs_core_folder)}}

        - id: spark_job_c
          type: io.kestra.plugin.spark.SparkCLI
          inputFiles:
            gcs.json: "{{ kv('GCP_CREDS') }}" # Read GCP credentials from KV store
          docker:
            image: bitnami/spark
          commands:
            - /opt/bitnami/spark/bin/spark-submit --jars ./lib/gcs-connector-hadoop3-2.2.5.jar --name GCS_Spark_Job --master local[*] ./scripts/03_filter_courses_spark.py --input {{render(vars.gcs_courses_raw)}} --output {{render(vars.gcs_courses_filtered)}}

      - id: bq_courses_creation
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.source_tables.courses`
          (
            unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
            date_extract DATE OPTIONS (description = 'Dataset upload date. Example: 2025-03-19'),
            provider STRING OPTIONS (description = 'company providing the course. Example: AFTRAL'),
            department STRING OPTIONS (description = 'name of the department of the training location. Example: Gironde'),
            region STRING OPTIONS (description = 'name of the region of the training location. Example: New Aquitaine'),
            type_referential STRING OPTIONS (description = '"RS" for certifications registered in the Specific Directory, "RNCP" for certifications registered in the RNCP, empty for legislative exceptions or when the certification is not active in the training catalog. Example: RS'),
            code_rs STRING OPTIONS (description = 'Certifications listed in the RS inventory. Example: 7041'),
            code_rncp STRING OPTIONS (description = 'National Directory of Professional Certifications Code. Example: -1 (Because it has code_rs)'),
            certification_title STRING OPTIONS (description = 'Certification Title. Example: Certificate of aptitude for safe driving (CACES) Recommendation 482 category B1: Sequential movement extraction equipment'),
            training_exit_level STRING OPTIONS (description = 'level of training.'),
            code_formacode_1 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31025 - Data Analytics, 31026 - Data Science'),
            code_formacode_2 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31028 - Artificial Intelligence'),
            code_formacode_3 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 331035 - Data Visualization'),
            code_formacode_4 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31052 - Data Warehouse, 31023 - big data'),
            code_formacode_5 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31054 - Computer Science & Information Systems'),
            main_formacode_desc STRING OPTIONS (description = 'Main Formacode Label corresponding to code_formacode_1. The whole list of codes is at '),
            code_rome_1 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset. Example: M1805 - Computer Studies and Development'),
            code_rome_2 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_3 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_4 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_5 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            nsf_code_1_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_2_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_3_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_1 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 326'),
            nsf_code_2 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 321'),
            nsf_code_3 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 320'),
            code_certification STRING OPTIONS (description = 'Certification code corresponding to certification_title. Example: 106655'),
            provider_id STRING OPTIONS (description = 'Establishment unique ID corresponding to provider. Example: 30540504500603'),
            training_id STRING OPTIONS (description = 'Trianing Id. Example: 30540504500603_ENCH22-14452-RS7041'),
            training_title STRING OPTIONS (description = 'Trianing title. Example: Construction Machinery Training CACES® R482 Cat. B1 Experienced'),
            strong_points STRING OPTIONS (description = 'Supplement to the expected training results. Example: Qualified professionals. We offer infrastructure and equipment to replicate real-life working conditions and enable you to obtain CACES certification in other categories. Please contact us.'),
            training_objective STRING OPTIONS (description = 'Description of training objectives. Example: Example: Update the theoretical knowledge and practical know-how necessary for the safe operation of construction machinery'),
            training_content STRING OPTIONS (description = 'Description of the training content'),
            expected_training_results STRING OPTIONS (description = 'Description of the expected results of the training. Example: Certificate of aptitude for safe driving (CACES®) for construction machinery in the category concerned, if the result is positive in accordance with CNAMTS Recommendation R 482'),
            trianing_module_count INTEGER OPTIONS (description = 'Number of separate training actions for the training concerned. Example: 2'),
            nb_session_active INTEGER OPTIONS (description = 'Number of active sessions for the training concerned. Example: 2'),
            nb_remote_session INTEGER OPTIONS (description = 'Number of sessions open for registration, with a remote attendance option. Example: 0'),
            duration_min INTEGER OPTIONS (description = 'Minimum of the total number of hours of the actions concerned. Example: 14'),
            duration_max INTEGER OPTIONS (description = 'Maximum of the total number of hours of the actions concerned. Example: 14'),
            duration_mean INTEGER OPTIONS (description = 'Average of the total number of hours of the actions concerned. Example: 14'),
            fees_min NUMERIC OPTIONS (description = 'Minimum fees including all taxes for the actions concerned. Example: 790.8'),
            fees_max NUMERIC OPTIONS (description = 'Maximum fees including all taxes for the actions concerned. Example: 790.8'),
            fees_mean NUMERIC OPTIONS (description = 'Average fees including all taxes for the actions concerned. Example: 790.8'),
            department_code STRING OPTIONS (description = 'Department code of the training location corresponding to the field department. Example: 33'),
            region_code STRING OPTIONS (description = 'Training location region code corresponding to the field Region. Example: 75'),
            nb_hours INTEGER OPTIONS (description = 'Sum of the hourly volumes available for training. Example: 540'),
            coderegion_export STRING OPTIONS (description = 'Training location region code. Example: 75')
          )
          PARTITION BY date_extract
          CLUSTER BY provider;

      - id: bq_courses_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.courses.courses_ext`
          (
            date_extract DATE OPTIONS (description = 'Dataset upload date. Example: 2025-03-19'),
            provider STRING OPTIONS (description = 'company providing the course. Example: AFTRAL'),
            department STRING OPTIONS (description = 'name of the department of the training location. Example: Gironde'),
            region STRING OPTIONS (description = 'name of the region of the training location. Example: New Aquitaine'),
            type_referential STRING OPTIONS (description = '"RS" for certifications registered in the Specific Directory, "RNCP" for certifications registered in the RNCP, empty for legislative exceptions or when the certification is not active in the training catalog. Example: RS'),
            code_rs STRING OPTIONS (description = 'Certifications listed in the RS inventory. Example: 7041'),
            code_rncp STRING OPTIONS (description = 'National Directory of Professional Certifications Code. Example: -1 (Because it has code_rs)'),
            certification_title STRING OPTIONS (description = 'Certification Title. Example: Certificate of aptitude for safe driving (CACES) Recommendation 482 category B1: Sequential movement extraction equipment'),
            training_exit_level STRING OPTIONS (description = 'level of training.'),
            code_formacode_1 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31025 - Data Analytics, 31026 - Data Science'),
            code_formacode_2 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31028 - Artificial Intelligence'),
            code_formacode_3 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 331035 - Data Visualization'),
            code_formacode_4 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31052 - Data Warehouse, 31023 - big data'),
            code_formacode_5 STRING OPTIONS (description = 'It represents the 5 most relevant Formacode codes for each training course. It is like a search word or a classification system to categorise training programs by skills it aims at. Example: 31054 - Computer Science & Information Systems'),
            main_formacode_desc STRING OPTIONS (description = 'Main Formacode Label corresponding to code_formacode_1. The whole list of codes is at '),
            code_rome_1 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset. Example: M1805 - Computer Studies and Development'),
            code_rome_2 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_3 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_4 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            code_rome_5 STRING OPTIONS (description = 'These codes are used to classify the different types of jobs and skills associated with each training program, helping users identify the employment opportunities related to the courses listed in the dataset.'),
            nsf_code_1_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_2_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_3_desc STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: Communication and Information'),
            nsf_code_1 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 326'),
            nsf_code_2 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 321'),
            nsf_code_3 STRING OPTIONS (description = 'Training Specialties Nomenclature Data – one label per column for ease of use. Maximum 3 labels for one training course. Example: 320'),
            code_certification STRING OPTIONS (description = 'Certification code corresponding to certification_title. Example: 106655'),
            provider_id STRING OPTIONS (description = 'Establishment unique ID corresponding to provider. Example: 30540504500603'),
            training_id STRING OPTIONS (description = 'Trianing Id. Example: 30540504500603_ENCH22-14452-RS7041'),
            training_title STRING OPTIONS (description = 'Trianing title. Example: Construction Machinery Training CACES® R482 Cat. B1 Experienced'),
            strong_points STRING OPTIONS (description = 'Supplement to the expected training results. Example: Qualified professionals. We offer infrastructure and equipment to replicate real-life working conditions and enable you to obtain CACES certification in other categories. Please contact us.'),
            training_objective STRING OPTIONS (description = 'Description of training objectives. Example: Example: Update the theoretical knowledge and practical know-how necessary for the safe operation of construction machinery'),
            training_content STRING OPTIONS (description = 'Description of the training content'),
            expected_training_results STRING OPTIONS (description = 'Description of the expected results of the training. Example: Certificate of aptitude for safe driving (CACES®) for construction machinery in the category concerned, if the result is positive in accordance with CNAMTS Recommendation R 482'),
            trianing_module_count INTEGER OPTIONS (description = 'Number of separate training actions for the training concerned. Example: 2'),
            nb_session_active INTEGER OPTIONS (description = 'Number of active sessions for the training concerned. Example: 2'),
            nb_remote_session INTEGER OPTIONS (description = 'Number of sessions open for registration, with a remote attendance option. Example: 0'),
            duration_min INTEGER OPTIONS (description = 'Minimum of the total number of hours of the actions concerned. Example: 14'),
            duration_max INTEGER OPTIONS (description = 'Maximum of the total number of hours of the actions concerned. Example: 14'),
            duration_mean INTEGER OPTIONS (description = 'Average of the total number of hours of the actions concerned. Example: 14'),
            fees_min NUMERIC OPTIONS (description = 'Minimum fees including all taxes for the actions concerned. Example: 790.8'),
            fees_max NUMERIC OPTIONS (description = 'Maximum fees including all taxes for the actions concerned. Example: 790.8'),
            fees_mean NUMERIC OPTIONS (description = 'Average fees including all taxes for the actions concerned. Example: 790.8'),
            department_code STRING OPTIONS (description = 'Department code of the training location corresponding to the field department. Example: 33'),
            region_code STRING OPTIONS (description = 'Training location region code corresponding to the field Region. Example: 75'),
            nb_hours INTEGER OPTIONS (description = 'Sum of the hourly volumes available for training. Example: 540'),
            coderegion_export STRING OPTIONS (description = 'Training location region code. Example: 75')
          )
          OPTIONS (
              format = 'parquet',
              uris = ["{{render(vars.gcs_courses_filtered)}}/*.parquet"]
          );

      - id: bq_courses_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.courses.courses_latest`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(date_extract AS STRING), ""),
              COALESCE(CAST(provider AS STRING), ""),
              COALESCE(CAST(department AS STRING), ""),
              COALESCE(CAST(training_id AS STRING), ""),
              COALESCE(CAST(region AS STRING), "")
            )) AS unique_row_id,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.courses.courses_ext`;

      - id: bq_courses_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.source_tables.courses` T
          USING `{{kv('GCP_PROJECT_ID')}}.courses.courses_latest` AS S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, date_extract, provider, department, region, type_referential, code_rs, code_rncp, certification_title, training_exit_level, code_formacode_1, code_formacode_2, code_formacode_3, code_formacode_4, code_formacode_5, main_formacode_desc, code_rome_1, code_rome_2, code_rome_3, code_rome_4, code_rome_5, nsf_code_1_desc, nsf_code_2_desc, nsf_code_3_desc, nsf_code_1, nsf_code_2, nsf_code_3, code_certification, provider_id, training_id, training_title, strong_points, training_objective, training_content, expected_training_results, trianing_module_count, nb_session_active, nb_remote_session, duration_min, duration_max, duration_mean, fees_min, fees_max, fees_mean, department_code, region_code, nb_hours, coderegion_export)
            VALUES (S.unique_row_id, S.date_extract, S.provider, S.department, S.region, S.type_referential, S.code_rs, S.code_rncp, S.certification_title, S.training_exit_level, S.code_formacode_1, S.code_formacode_2, S.code_formacode_3, S.code_formacode_4, S.code_formacode_5, S.main_formacode_desc, S.code_rome_1, S.code_rome_2, S.code_rome_3, S.code_rome_4, S.code_rome_5, S.nsf_code_1_desc, S.nsf_code_2_desc, S.nsf_code_3_desc, S.nsf_code_1, S.nsf_code_2, S.nsf_code_3, S.code_certification, S.provider_id, S.training_id, S.training_title, S.strong_points, S.training_objective, S.training_content, S.expected_training_results, S.trianing_module_count, S.nb_session_active, S.nb_remote_session, S.duration_min, S.duration_max, S.duration_mean, S.fees_min, S.fees_max, S.fees_mean, S.department_code, S.region_code, S.nb_hours, S.coderegion_export);

  - id: if_enrollments
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.courses_or_enrollments == 'enrollments'}}"
    then:
      - id: workingDirectory_e
        type: io.kestra.plugin.core.flow.WorkingDirectory
        tasks:
        - id: cloneRepository_e
          type: io.kestra.plugin.git.Clone
          url: https://github.com/jugnuarora/france_courses_enrollments.git
          branch: main
        
        - id: pythonScript_e
          type: io.kestra.plugin.scripts.python.Commands
          warningOnStdErr: false
          docker:
            image: ghcr.io/kestra-io/pydata:latest
          beforeCommands:
            - pip install -r requirements.txt > /dev/null
            - cd scripts
            - mkdir -p .dlt
            - echo "[destination.filesystem]" > .dlt/secrets.toml
            - echo "bucket_url = \"{{ kv('SECRET_BUCKET_URL') }}\"" >> .dlt/secrets.toml
            - echo "[destination.filesystem.credentials]" >> .dlt/secrets.toml
            - echo "project_id = \"{{ kv('GCP_PROJECT_ID') }}\"" >> .dlt/secrets.toml
            - echo "private_key = \"\"\"{{ kv('SECRET_PRIVATE_KEY') }}\"\"\"" >> .dlt/secrets.toml
            - echo "client_email = \"{{ kv('SECRET_CLIENT_EMAIL') }}\"" >> .dlt/secrets.toml
          commands:
            - python 02_enrollments_data_upload.py --output {{render(vars.gcs_core_folder)}}

        - id: spark_job_e
          type: io.kestra.plugin.spark.SparkCLI
          inputFiles:
            gcs.json: "{{ kv('GCP_CREDS') }}" # Read GCP credentials from KV store
          docker:
            image: bitnami/spark
          commands:
            - /opt/bitnami/spark/bin/spark-submit --jars ./lib/gcs-connector-hadoop3-2.2.5.jar --name GCS_Spark_Job --master local[*] ./scripts/04_filter_enrollments_spark.py --input {{render(vars.gcs_enrollments_raw)}} --output {{render(vars.gcs_enrollments_filtered)}}

      - id: bq_enrollments_creation
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.source_tables.enrollments`
          (
            unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
            year_month DATE OPTIONS (description = 'year_month of entry or exit. Example: 2024-11'),
            year STRING OPTIONS (description = 'year of entry or exit of trainings. Example: 2024'),
            month STRING OPTIONS (description = 'month of entry or exit of tranings. Example: 11'),
            type_referential STRING OPTIONS (description = '"RS" for certifications registered in the Specific Directory, "RNCP" for certifications registered in the RNCP, empty for legislative exceptions or when the certification is not active in the training catalog. Example: RS'),
            code_rncp STRING OPTIONS (description = 'If completed (different from -1), it indicates a certification registered in the National Directory of Professional Certifications. The RNCP lists all professional qualifications recognized by the State, i.e. "vocational" training. Example: -1'),
            code_rs STRING OPTIONS (description = 'If filled in (different from -1), it indicates a certification registered in the Specific Directory. The RS groups together skills complementary to professional certifications. This includes regulatory obligations, cross-disciplinary skills certifications, and certifications complementary to a profession. Example: 5055'),
            code_certification STRING OPTIONS (description = 'The certification code in the Certif Info reference system of the CARIF-OREF network and ONISEP. Example: 106691'),
            certification_title STRING OPTIONS (description = "The title of the certification. Example: Certificat d'aptitude à conduire en sécurité (CACES) - Recommandation 489 catégorie 1A : Transpalettes à conducteur porté sans élévation du poste de conduite"),
            provider_id STRING OPTIONS (description = 'Establishment unique ID corresponding to provider. Example: 45331683800045'),
            provider STRING OPTIONS (description = 'OLIVIER DUPEYRE FORMATION'),
            training_entries INTEGER OPTIONS (description = 'Volume of trainees having started their training according to the date of entry into training declared by the training organization. Example: 4'),
            partial_achievement_exits INTEGER OPTIONS (description = 'Volume of trainees who completed their training without having followed it in full based on the training completion date declared by the training organization. Example: 0'),
            complete_achievement_exits INTEGER OPTIONS (description = 'Volume of trainees having completed their training by following it in full according to the training completion date declared by the training organization. Example: 4'),
            load_date DATE OPTIONS (description = 'date when reported by the provider. Example: 2025-03-03')
          )
          PARTITION BY year_month
          CLUSTER BY provider;

      - id: bq_enrollments_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.enrollments.enrollments_ext`
          (
            year_month DATE OPTIONS (description = 'year_month of entry or exit. Example: 2024-11'),
            year STRING OPTIONS (description = 'year of entry or exit of trainings. Example: 2024'),
            month STRING OPTIONS (description = 'month of entry or exit of tranings. Example: 11'),
            type_referential STRING OPTIONS (description = '"RS" for certifications registered in the Specific Directory, "RNCP" for certifications registered in the RNCP, empty for legislative exceptions or when the certification is not active in the training catalog. Example: RS'),
            code_rncp STRING OPTIONS (description = 'If completed (different from -1), it indicates a certification registered in the National Directory of Professional Certifications. The RNCP lists all professional qualifications recognized by the State, i.e. "vocational" training. Example: -1'),
            code_rs STRING OPTIONS (description = 'If filled in (different from -1), it indicates a certification registered in the Specific Directory. The RS groups together skills complementary to professional certifications. This includes regulatory obligations, cross-disciplinary skills certifications, and certifications complementary to a profession. Example: 5055'),
            code_certification STRING OPTIONS (description = 'The certification code in the Certif Info reference system of the CARIF-OREF network and ONISEP. Example: 106691'),
            certification_title STRING OPTIONS (description = "The title of the certification. Example: Certificat d'aptitude à conduire en sécurité (CACES) - Recommandation 489 catégorie 1A : Transpalettes à conducteur porté sans élévation du poste de conduite"),
            provider_id STRING OPTIONS (description = 'Establishment unique ID corresponding to provider. Example: 45331683800045'),
            provider STRING OPTIONS (description = 'OLIVIER DUPEYRE FORMATION'),
            training_entries INTEGER OPTIONS (description = 'Volume of trainees having started their training according to the date of entry into training declared by the training organization. Example: 4'),
            partial_achievement_exits INTEGER OPTIONS (description = 'Volume of trainees who completed their training without having followed it in full based on the training completion date declared by the training organization. Example: 0'),
            complete_achievement_exits INTEGER OPTIONS (description = 'Volume of trainees having completed their training by following it in full according to the training completion date declared by the training organization. Example: 4'),
            load_date DATE OPTIONS (description = 'date when reported by the provider. Example: 2025-03-03')
          )
          OPTIONS (
              format = 'parquet',
              uris = ["{{render(vars.gcs_enrollments_filtered)}}/*.parquet"]
          );
      
      - id: bq_enrollments_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.enrollments.enrollments_latest`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(year_month AS STRING), ""),
              COALESCE(CAST(provider AS STRING), ""),
              COALESCE(CAST(certification_title AS STRING), ""),
              COALESCE(CAST(load_date AS STRING), "")
            )) AS unique_row_id,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.enrollments.enrollments_ext`;

      - id: bq_enrollments_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.source_tables.enrollments` T
          USING `{{kv('GCP_PROJECT_ID')}}.enrollments.enrollments_latest` AS S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, year_month, year, month, type_referential, code_rncp, code_rs, code_certification, certification_title, provider_id, provider, partial_achievement_exits, complete_achievement_exits, load_date)
            VALUES (S.unique_row_id, S.year_month, S.year, S.month, S.type_referential, S.code_rncp, S.code_rs, S.code_certification, S.certification_title, S.provider_id, S.provider, S.partial_achievement_exits, S.complete_achievement_exits, S.load_date);

  - id: if_formacode
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.courses_or_enrollments == 'formacode'}}"
    then:
      - id: workingDirectory_f
        type: io.kestra.plugin.core.flow.WorkingDirectory
        tasks:
        - id: cloneRepository_f
          type: io.kestra.plugin.git.Clone
          url: https://github.com/jugnuarora/france_courses_enrollments.git
          branch: main

        - id: spark_job_f
          type: io.kestra.plugin.spark.SparkCLI
          inputFiles:
            gcs.json: "{{ kv('GCP_CREDS') }}" # Read GCP credentials from KV store
          docker:
            image: bitnami/spark
          beforeCommands:
            - pip install deep_translator
          commands:
            - /opt/bitnami/spark/bin/spark-submit --jars ./lib/gcs-connector-hadoop3-2.2.5.jar --name GCS_Spark_Job --master local[*] ./scripts/05_formacode_conversion.py --input ./data/formacode_description.csv --output {{render(vars.gcs_formacode_translated)}}
       
      - id: upload_bigquery_f
        type: io.kestra.plugin.gcp.bigquery.LoadFromGcs
        from:
          - "{{render(vars.gcs_formacode_translated)}}/*.parquet"
        destinationTable: "{{kv('GCP_DATASET')}}.source_tables.formacode"
        format: PARQUET
          
  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{ kv('GCP_CREDS') }}"
      projectId: "{{ kv('GCP_PROJECT_ID') }}"
      location: "{{ kv('GCP_LOCATION') }}"
      bucket: "{{ kv('GCP_BUCKET_NAME') }}"
      bucket_url: "{{ kv('SECRET_BUCKET_URL') }}"
      project_id: "{{ kv('SECRET_PROJECT_ID') }}"
      private_key: "{{ kv('SECRET_PRIVATE_KEY') }}"
      client_email: "{{ kv('SECRET_CLIENT_EMAIL') }}"